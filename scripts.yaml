#-----------------------------------------------------------------------------#
#                                                                             #
# ALARMA y SIRENAS                                                            #
#                                                                             #
#-----------------------------------------------------------------------------#
# 10004: Ringtone Sistema_Armado_Desarme:
#
# "sistema armado
# 15 seg para desarmar
# desarme ahora por favor
# sistema armado, quedan 3 segundos
# desarme ahora por favor"
#
#{ "gw_mac" : "78:11:DC:B7:88:FA",
#"ringtone_id" : "10004",
#"ringtone_vol" : "50"
#}
#
# 10005: Ringtone Sistema_Armandose_SalgaAhora:
#
# "sistema armado
# 15 seg para salir
# salga ahora por favor
# sistema armado, quedan 3 segundos
# salga ahora por favor"
#

#
# SCRIPT PARA NOTIFICACION MENSAJES SONOROS PERSONALIZADOS:
#
# 10004: Ringtone Sistema_Armado_Desarme:
# 10005: Ringtone Sistema_Armandose_SalgaAhora:
#
# PARÁMETROS ENTRADA:
#   data_template:
#     fromstate: '{{trigger.from_state.state}}'
#     tostate: '{{trigger.to_state.state}}'
#     ringtone_msg: <nnnnn>
#
alarma_to_pending:
  alias: "Alarma Disarmed to Pending"
  sequence:
    - condition: template
      value_template: '{{fromstate != tostate}}'

    # Aviso sonoro con Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_gateway
        ringtone_id: '{{ringtone_msg}}'
        ringtone_vol: >
          {{ states('input_number.xiaomi_volume_alarm_armed') | int }}


# SCRIPT PARA NOTIFICACION MENSAJES SONORO SISTEMA ARMADO
#
# {{ states.input_select.xiaomi_sound_alarm_armed.state.split('-')[0] }}
# {{ states('input_number.xiaomi_volume_alarm_armed') | int }}
#
sirena_xiaomi_play_alarm_armed:
  alias: "Alarma Sonido Warning Armado"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_xiaomi_sounds', 'off') %}true{% endif %}"

    # Aviso Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_gateway
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm_armed.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm_armed') | int }}

# SCRIPT PARA NOTIFICACION MENSAJES SONORO SISTEMA ARMADO
#
# {{ states.input_select.xiaomi_sound_alarm_disarmed.state.split('-')[0] }}
# {{ states('input_number.xiaomi_volume_alarm_disarmed') | int }}
#
sirena_xiaomi_play_alarm_disarmed:
  alias: "Alarma Sonido Warning Desarmado"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_xiaomi_sounds', 'off') %}true{% endif %}"

    # Aviso Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_gateway
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm_disarmed.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm_disarmed') | int }}

# SCRIPT PARA ENCENDER SIRENAS INTERIOR TRAS DISPARO DE ALARMA
#
# {{ states.input_select.xiaomi_sound_alarm.state.split('-')[0] }}
# {{ states('input_number.xiaomi_volume_alarm') | int }}
#
xiaomi_play_alarm:
  alias: "Xiaomi GW Sonido Alarma"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_xiaomi_sounds', 'off') %}true{% endif %}"
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_gateway
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm') | int}}

# SCRIPT PARA ENCENDER SIRENAS INTERIOR TRAS PULSAR EL DOBLE BOTON PANICO
#
# La secuencia requerida es:
# 1. Activar la "llave del botón pánico" con el interruptor: input_boolean.panic_button
# 2. Pulsar el botón de ESTE script publicado en el frontend: script.alarma_boton_panico
# 3. Pulsar el botón del script de apagado para cancelar sirenas: script.alarma_boton_sirenas_off
#
# Las sirenas se activan en este orden:
# 1. Sirena interior Xiaomi con el tono configurado para Alarma
# 2. Retraso de 5 segundos
# 3. Sirena interior pasillo mediante switch.sonoff_basic_sw1

alarma_boton_panico:
  alias: 'Boton Panico ON'
  sequence:
    - condition: template
      value_template: "{% if is_state('input_boolean.panic_button', 'on') %}true{% endif %}"
    # Aviso ALARMA con Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    - service: script.turn_on
      entity_id: script.xiaomi_play_alarm
    # Retraso 5"
    - delay: '00:00:05'
    # SONOFF_SW1_SIRENA INTERIOR ==> ON
    - service: switch.turn_on
      entity_id: switch.sonoff_basic_sw1
    # Notifica Telegram
    - service: script.turn_on
      #entity_id: script.notifica_alarma CAMBIAR GO LIVE
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> URGENTE: BOTON PANICO ACTIVADO

    # Retraso 5'
    #- delay: '00:05:00'
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    #- service: switch.turn_off
    #  entity_id: switch.sonoff_basic_sw1

alarma_boton_sirenas_off:
  alias: 'Sirenas Interior OFF'
  sequence:
    # Sierna ALARMA Xiaomi ==> OFF
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_gateway
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.sonoff_basic_sw1

magiccube_check_alarm_sequence:
  alias: 'Alarma MagicCube Alarm Sequence'
  sequence:
    - condition: and
      conditions:
        - condition: template
          value_template: '{% if not states.binary_sensor.cube_158d00024a4a62_2.attributes.last_action | string == "alert" %}true{% endif %}'
        - condition: template
          value_template: >-
            {{ as_timestamp(now()) -
               states.input_datetime.magiccube_last_action1.attributes.timestamp < 10
            }}
    - service: script.magiccube_check_arm_away
    - service: script.magiccube_check_disarm

magiccube_check_arm_away:
  alias: 'Alarma MagicCube Arm Away'
  sequence:
    - condition: and
      conditions:
        - condition: template
          value_template: '{{ states.binary_sensor.cube_158d00024a4a62_2.attributes.last_action == "shake_air" }}'
        - condition: template
          value_template: '{{ states.input_text.magiccube_last_action1.state == "rotate" }}'
        - condition: template
          value_template: '{{ not states.alarm_control_panel.ha.state == "armed_away" }}'
    # Llamada al service estándar de armado.  Pasa a Pending y luego Armed_Away
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.ha
    # Notifica Evento
    # La notificación se hace mediente la activación de la regla:
    # alias: 'A2 Alarm Armed Away'

magiccube_check_disarm:
  alias: 'Alarma MagicCube Disarm'
  sequence:
    - condition: and
      conditions:
        - condition: template
          value_template: '{{ states.binary_sensor.cube_158d00024a4a62_2.attributes.last_action == "shake_air" }}'
        - condition: template
          value_template: '{{ states.input_text.magiccube_last_action1.state == "flip90" }}'
        - condition: template
          value_template: '{{ not states.alarm_control_panel.ha.state == "disarmed" }}'
    # Desactiva Alarma
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.ha
    # Aviso sonoro con Xiaomi GW
    - service: script.turn_on
      entity_id: script.sirena_xiaomi_play_alarm_disarmed
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> ESTADO: Desarmado

magiccube_update_lastaction:
  alias: 'Alarma MagicCube Update Last Action'
  sequence:
    # Si Last_action = "alert" => CANCEL
    #- condition: template
    #  value_template: '{% if not states.binary_sensor.cube_158d00024a4a62_2.attributes.last_action | string == "alert" %}true{% endif %}'
    # Actualiza Última Acciónn
    - service: input_text.set_value
      entity_id: input_text.magiccube_last_action1
      data_template:
        value: '{{ states.binary_sensor.cube_158d00024a4a62_2.attributes.last_action }}'
    # Actualiza Hora Último Evento
    - service: input_datetime.set_datetime
      entity_id: input_datetime.magiccube_last_action1
      data_template:
        date: '{{ as_timestamp(now()) | timestamp_custom("%Y-%m-%d") }}'
        time: '{{ as_timestamp(now()) | timestamp_custom("%H:%M:%S") }}'



#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DEVICE TRACKER                                                      #
#                                                                             #
#-----------------------------------------------------------------------------#
updatetracker:
  alias: 'Update Meta-Tracker'
  sequence:
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: '{{entityid}}'
    - condition: template
      value_template: '{{fromstate != tostate}}'
    - service: python_script.countpeople
    - service: input_text.set_value
      entity_id: input_text.family_last_tracking
      data_template:
        value: >-
          {{ states[entityid.split('.')[0]][entityid.split('.')[1]].name }}, {{ tostate }}, {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.
    #- service: logbook.log
    #  data_template:
    #    name: "Meta-tracker: "
    #    message: >-
    #      {{ states[entityid.split('.')[0]][entityid.split('.')[1]].name }} is {{ tostate }} at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.

reset_meta_tracker:
  alias: 'Reset Meta-Tracker'
  sequence:
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.b8b52a3bf0384e72a268705d9b06e496 #AAC
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.e3c67d6b51bf445ba241a0045bfe0222 #MFC
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.93e3d52336a54d4d898b204abdf3ee94 #PAF
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.bef743fa74f2464ba458612ad3e1c195 #AAF

reset_meta_alarm_trigger:
  alias: 'Reset Meta-Alarm-Trigger'
  sequence:
    - service: python_script.meta_alarm_trigger
      data_template:
        entity_id: sensor.alarm_last_trigger

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS GENERICOS DE NOTIFICACIONES                                         #
#                                                                             #
#-----------------------------------------------------------------------------#
notifica_alarma:
  alias: 'Mensaje Alarma'
  sequence:
  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  # Notificación Telegram
  - service: notify.telegram_alarm
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

  # Notificación Telegram
  - service: notify.telegram_alarm
    data:
      title: '*ALARMA*'
      message: Cámaras Seguridad
      data:
        photo:
          - url: http://192.168.0.11/snapshot/image0.jpg
            caption: Cámara Cocina
          - url: http://192.168.0.12:8080/snapshot.cgi
            caption: Cámara Estudio

  # Notificación IOS
  - service: notify.notifica_grupo_ios
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

notifica_evento:
  alias: 'Notifica Evento a Family'
  sequence:
  # IF HOME_NOTIFY = OFF CANCEL
  - condition: template
    value_template: "{% if not is_state('input_select.home_notify', 'Off') %}true{% endif %}"

  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  - service: notify.telegram_notify
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

notifica_warning:
  alias: 'Notifica Aviso Debug'
  sequence:
  # IF HOME_NOTIFY = OFF CANCEL
  - condition: template
    value_template: "{% if not is_state('input_select.home_notify', 'Off') %}true{% endif %}"

  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  # Llamada a Scripts Notificación Telegram AAC
  - service: notify.telegram_aac
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

#-----------------------------------------------------------------------------#
#                                                                             #
# CONTROL DE LUCES Y ALUMBRADO                                                #
#                                                                             #
#-----------------------------------------------------------------------------#
luces_on_entrada_sensor:
  alias: 'Luces On Entrada si Sensor'
  sequence:
    - service: light.turn_on
      entity_id: light.hue_entrada
      data:
        brightness: 120
        rgb_color: [254, 0, 0]
    # Si Alarm.Armed_Home => Piloto ON
    - service: script.luz_on_armed_home

luz_on_armed_home:
  alias: 'Luces On Entrada si Sensor'
  sequence:
    # When a condition does not return true, the script will finish
    # Check Panel Alarma <> armed_home ==> Exit
    - condition: state
      entity_id: alarm_control_panel.ha
      state: 'armed_home'
    # Enciende Piloto Azul Alarma
    - service: light.turn_on
      entity_id: light.gateway_light_7811dcb788fa
      data:
        brightness: 50
        rgb_color: [0, 0, 254]

luces_off_entrada_sensor:
  alias: 'Luces Off Entrada si Sensor'
  sequence:
    - service: light.turn_off
      entity_id:
        - light.hue_entrada
        - light.gateway_light_7811dcb788fa

luces_on_family_home:
  alias: 'Family at Home Piloto ON'
  sequence:
    #- condition: template
    #  value_template: "{% if is_state('sun.sun', 'below_horizon') %}true{% endif %}"
    - condition: sun
      after: sunset
    - service: light.turn_on
      entity_id: light.hue_entrada

# Apagado General Interior Casa menos Entrada/Pasillo
luces_off:
  alias: 'Luces Central OFF'
  sequence:
    - service: light.turn_off
      entity_id:
        - group.luces_cocina_grp
        - group.luces_salon_grp
        - group.luces_estudio_grp
        - group.luces_entrada_grp

luces_exterior_timer:
  alias: 'Luces Exterior Timer'
  sequence:
    - service: automation.turn_off
      entity_id: automation.l08_luces_on_exterior_segun_sensor
    - service: switch.turn_on
      entity_id: switch.wall_switch_right_158d0002236e75
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*LUCES: ON*'
          message: >
            >>> EVENTO: Sensor Presencia Exterior Activado

            >>> LUCES: Alumbrado Encendido 5'

    - delay: '00:05:00'
    - service: switch.turn_off
      entity_id: switch.wall_switch_right_158d0002236e75
    - service: automation.turn_on
      entity_id: automation.l08_luces_on_exterior_segun_sensor

luces_exterior_off:
  alias: 'Luces Exterior OFF'
  sequence:
    - service: switch.turn_off
      entity_id:
        - switch.wall_switch_right_158d0002236e75   # Faroles Alumbrado Exterior
        - switch.sonoff_4ch_relay_1                 # Luces Balizas Cespec


luces_exterior_on:
  alias: 'Luces Exterior y Jardín On'
  sequence:
    # Llamada a scripts de control programador luces diario
    - service: script.luces_jardin_check_xia_ext
    - service: script.luces_jardin_check_bas_sw4
    - service: script.luces_jardin_check_4ch_ch1
    - service: script.luces_jardin_check_4ch_ch2
    - service: script.luces_jardin_check_4ch_ch3
    - service: script.luces_jardin_check_4ch_ch4

luces_jardin_check_xia_ext:
  alias: 'Luces On Faroles Exterior'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_xia_ext
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.wall_switch_right_158d0002236e75

luces_jardin_check_bas_sw2:
  alias: 'Luces On SonoffBAS SW2'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_bas_sw2
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.jardin_programador_bas_sw2

luces_jardin_check_bas_sw4:
  alias: 'Luces On SonoffBAS SW4'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_bas_sw4
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.jardin_programador_bas_sw4

luces_jardin_check_4ch_ch1:
  alias: 'Luces On Sonoff4ch CH1'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch1
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.sonoff_4ch_relay_1

luces_jardin_check_4ch_ch2:
  alias: 'Luces On Sonoff4ch CH2'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch2
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.sonoff_4ch_relay_2

luces_jardin_check_4ch_ch3:
  alias: 'Luces On Sonoff4ch CH3'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch3
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.sonoff_4ch_relay_3

luces_jardin_check_4ch_ch4:
  alias: 'Luces On Sonoff4ch CH4'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch4
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.sonoff_4ch_relay_4

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE DEPURADORA PISCINA                                               #
#                                                                             #
#-----------------------------------------------------------------------------#

piscina_timer_start:
  alias: Timer Piscina Start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.piscina
        duration: '{{ states.sensor.piscina_manual_segundos.state}}'
    - service: switch.turn_on
      entity_id: switch.sonoff_pow_sw1
      #entity_id: switch.sonoff_4ch_relay_2
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_start_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: '{{ states.sensor.piscina_duracion_manual.state}}'

piscina_timer_start_diario:
  alias: Timer Piscina Start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.piscina
        duration: '{{ states.sensor.piscina_duracion_planificada.state}}'
    - service: switch.turn_on
      entity_id: switch.sonoff_pow_sw1
      #entity_id: switch.sonoff_4ch_relay_2
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_start_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: '{{ states.sensor.piscina_duracion_planificada.state}}'


piscina_timer_cancel:
  alias: Timer Piscina Cancel
  sequence:
    - service: timer.cancel
      entity_id: timer.piscina
    - service: switch.turn_off
      entity_id: switch.sonoff_pow_sw1
      #entity_id: switch.sonoff_4ch_relay_2
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_end_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: ''

piscina_timer_pause:
  alias: Timer Piscina Pause
  sequence:
    - service: timer.pause
      entity_id: timer.piscina
    - service: switch.turn_off
      entity_id: switch.sonoff_pow_sw1
      #entity_id: switch.sonoff_4ch_relay_2

piscina_timer_resume:
  alias: Timer Piscina Resume
  sequence:
    - service: timer.start
      entity_id: timer.piscina
    - service: switch.turn_on
      entity_id: switch.sonoff_pow_sw1
      #entity_id: switch.sonoff_4ch_relay_2

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE ARRANQUE DEL SISTEMA                                             #
#                                                                             #
#-----------------------------------------------------------------------------#
sonoff_initialize:
  alias: 'Arranque Interruptores SONOFF'
  sequence:
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.sonoff_basic_sw1

