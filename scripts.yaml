#-----------------------------------------------------------------------------#
#                                                                             #
# ALARMA y SIRENAS                                                            #
#                                                                             #
#-----------------------------------------------------------------------------#
# 10004: Ringtone Sistema_Armado_Desarme:
#
# "sistema armado
# 15 seg para desarmar
# desarme ahora por favor
# sistema armado, quedan 3 segundos
# desarme ahora por favor"
#
#{ "gw_mac" : "78:11:DC:B7:88:FA",
#"ringtone_id" : "10004",
#"ringtone_vol" : "50"
#}
#
# 10005: Ringtone Sistema_Armandose_SalgaAhora:
#
# "sistema armado
# 15 seg para salir
# salga ahora por favor
# sistema armado, quedan 3 segundos
# salga ahora por favor"
#

#
# SCRIPT PARA NOTIFICACION MENSAJES SONOROS PERSONALIZADOS:
#
# 10004: Ringtone Sistema_Armado_Desarme:
# 10005: Ringtone Sistema_Armandose_SalgaAhora:
#
# PARÁMETROS ENTRADA:
#   data_template:
#     fromstate: '{{trigger.from_state.state}}'
#     tostate: '{{trigger.to_state.state}}'
#     ringtone_msg: <nnnnn>
#

alarma_to_pending:
  alias: "Alarma Disarmed to Pending"
  sequence:
    - condition: template
      value_template: '{{fromstate != tostate}}'

    # Aviso sonoro con Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_mac
        ringtone_id: '{{ringtone_msg}}'
        ringtone_vol: >
          {{ states('input_number.xiaomi_volume_alarm_armed') | int }}

# SCRIPT PARA NOTIFICACION MENSAJES SONORO SISTEMA ARMADO
#
# {{ states.input_select.xiaomi_sound_alarm_armed.state.split('-')[0] }}
# {{ states('input_number.xiaomi_volume_alarm_armed') | int }}
#
sirena_xiaomi_play_alarm_armed:
  alias: "Alarma Sonido Armado"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_sonido_sirenas', 'off') %}true{% endif %}"
    # Aviso Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_mac
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm_armed.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm_armed') | int }}

sirena_xiaomi_play_alarm_disarmed:
  alias: "Alarma Sonido Desarmado"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_sonido_sirenas', 'off') %}true{% endif %}"
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0
    # Aviso Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_mac
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm_disarmed.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm_disarmed') | int }}



# SCRIPT PARA ENCENDER SIRENAS INTERIOR TRAS DISPARO DE ALARMA
#
# {{ states.input_select.xiaomi_sound_alarm.state.split('-')[0] }}
# {{ states('input_number.xiaomi_volume_alarm') | int }}
#
sirena_alarma_armed_away:
  alias: "Sirena Alarma Armed Away"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_sonido_sirenas', 'off') %}true{% endif %}"
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_mac
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm') | int}}
    # Retraso 5"
    - delay: '00:00:05'
    # SONOFF_SW1_SIRENA INTERIOR ==> ON
    #
    - service: switch.turn_on
      entity_id: switch.esphome_bas_sw0

# SCRIPT PARA ENCENDER SOLO SIRENA XIAOMI TRAS DISPARO
# DE ALARMA ARMED HOME O SENSOR DE HUMO
#
sirena_alarma_armed_home:
  alias: "Sirena Alarma Armed Home"
  sequence:
    # IF Mute_Xiaomi = ON => True => CANCEL SCRIPT
    - condition: template
      value_template: "{% if is_state('input_boolean.mute_sonido_sirenas', 'off') %}true{% endif %}"
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xiaomi_mac
        ringtone_id: >-
            {{ states.input_select.xiaomi_sound_alarm.state.split('-')[0] }}
        ringtone_vol: >-
            {{ states('input_number.xiaomi_volume_alarm') | int}}


# SCRIPT PARA NOTIFICACION MENSAJES SONORO SISTEMA ARMADO
#
sirena_stop_alarma:
  alias: "Botón Stop Sirenas"
  sequence:
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0
    # Aviso Xiaomi GW
    - service: xiaomi_aqara.stop_ringtone
      data:
        gw_mac: !secret xiaomi_mac


# SCRIPT PARA ENCENDER SIRENAS INTERIOR TRAS PULSAR EL DOBLE BOTON PANICO
#
# La secuencia requerida es:
# 1. Activar la "llave del botón pánico" con el interruptor: input_boolean.panic_button
# 2. Pulsar el botón de ESTE script publicado en el frontend: script.alarma_boton_panico
# 3. Pulsar el botón del script de apagado para cancelar sirenas: script.boton_panico
#
# Las sirenas se activan en este orden:
# 1. Sirena interior Xiaomi con el tono configurado para Alarma
# 2. Retraso de 5 segundos
# 3. Sirena interior pasillo mediante switch.esphome_bas_sw0

alarma_boton_panico:
  alias: 'Boton Panico ON'
  sequence:
    # When a condition does not return true, the script will finish
    - condition: template
      value_template: "{% if is_state('input_boolean.panic_button', 'on') %}true{% endif %}"
    # Llamada Scripts SIRENAS ALARMA
    - service: script.sirena_alarma
    # Notifica Telegram
    - service: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> URGENTE: BOTON PANICO ACTIVADO



alarma_boton_panico_off:
  alias: 'Boton Panico OFF'
  sequence:
    # Llamada Scripts STOP SIRENAS ALARMA
    - service: script.sirena_stop_alarma
    # Notifica Telegram
    - service: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> URGENTE: BOTON PANICO DESACTIVADO



#
# SCRIPTS PARA GESTION ALARMA DESDE ALEXA
#
homy_armado_parcial:
  alias: 'Homy Armado Parcial'
  sequence:
    # When a condition does not return true, the script will finish
    - condition: template
      value_template: "{% if not is_state('alarm_control_panel.ha', 'armed_home') %}true{% endif %}"
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.ha
    # La notificación se hace mediente la activación de la regla:
    # alias: 'A2 Alarm Armed Away'

homy_armado_total:
  alias: 'Homy Armado Total'
  sequence:
    # When a condition does not return true, the script will finish
    - condition: template
      value_template: "{% if not is_state('alarm_control_panel.ha', 'armed_away') %}true{% endif %}"
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.ha
    # La notificación se hace mediente la activación de la regla:
    # alias: 'A2 Alarm Armed Away'

homy_desarmado_code:
  alias: 'Homy Desarmado'
  sequence:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.ha
    # La notificación se hace mediente la activación de la regla:
    # alias: 'A4_alarma_activa_desarmada'

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DEVICE TRACKER                                                      #
#                                                                             #
#-----------------------------------------------------------------------------#
updatetracker:
  alias: 'Update Meta-Tracker'
  sequence:
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: '{{entityid}}'
    - condition: template
      value_template: '{{fromstate != tostate}}'
    - service: python_script.countpeople
    - service: input_text.set_value
      entity_id: input_text.family_last_tracking
      data_template:
        value: >-
          {{ states[entityid.split('.')[0]][entityid.split('.')[1]].name }}, {{ tostate }}, {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.
    #- service: logbook.log
    #  data_template:
    #    name: "Meta-tracker: "
    #    message: >-
    #      {{ states[entityid.split('.')[0]][entityid.split('.')[1]].name }} is {{ tostate }} at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.

reset_meta_tracker:
  alias: 'Reset Meta-Tracker'
  sequence:
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.aac_ios #AAC
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.mfc_ios #MFC
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.paf_ios #PAF
    - service: python_script.meta_device_tracker
      data_template:
        entity_id: device_tracker.aaf_ios #AAF

reset_meta_alarm_trigger:
  alias: 'Reset Meta-Alarm-Trigger'
  sequence:
    - service: python_script.meta_alarm_trigger
      data_template:
        entity_id: sensor.alarm_last_trigger

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS GENERICOS DE NOTIFICACIONES                                         #
#                                                                             #
#-----------------------------------------------------------------------------#
notifica_alarma:
  alias: 'Mensaje Alarma'
  sequence:
  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  # Notificación Telegram
  - service: notify.telegram_alarm
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

  # Notificación Telegram
  - service: notify.telegram_alarm
    data:
      title: '*ALARMA*'
      message: Cámaras Seguridad
      data:
        photo:
          - url: http://192.168.0.13/snapshot/image0.jpg
            caption: Cámara Cocina
          - url: http://192.168.0.12:8080/snapshot.cgi
            caption: Cámara Estudio

  # Notificación IOS
  - service: notify.notifica_grupo_ios
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

notifica_warning:
  alias: 'Mensaje Alarma'
  sequence:
  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  # Notificación Telegram
  - service: notify.telegram_alarm
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

  # Notificación IOS
  - service: notify.notifica_grupo_ios
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}

notifica_evento:
  alias: 'Notifica Evento a Family'
  sequence:
  # IF HOME_NOTIFY = OFF CANCEL
  - condition: template
    value_template: "{% if not is_state('input_select.home_notify', 'Off') %}true{% endif %}"

  # Actualiza el valor de input_text.mensaje_tit con el título recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_tit
    data_template:
      value: "{{ title }}"

  # Actualiza el valor de input_text.mensaje_msg con el cuerpo del mensaje recibido.
  - service: input_text.set_value
    entity_id: input_text.mensaje_msg
    data_template:
      value: "{{ message }}"

  - service: notify.telegram_notify
    data_template:
      title: >
        {{ states('input_text.mensaje_tit') }}
      message: >
        {{ states('input_text.mensaje_msg') }}


#-----------------------------------------------------------------------------#
#                                                                             #
# CONTROL DE LUCES Y ALUMBRADO                                                #
#                                                                             #
#-----------------------------------------------------------------------------#

luces_dormitorio_escena_read:
  alias: 'Luces Dormitorio Escena Lectura'
  sequence:
    # El nombre de la escena es case sensitive
    - service: hue.hue_activate_scene
      data:
        group_name: "Dormitorio"
        scene_name: "Read"

luces_dormitorio_escena_relax:
  alias: 'Luces Dormitorio Escena Relax'
  sequence:
    - service: hue.hue_activate_scene
      data:
        group_name: "Dormitorio"
        scene_name: "Relax"

luces_dormitorio_escena_dimmed:
  alias: 'Luces Dormitorio Escena Tenue'
  sequence:
    - service: hue.hue_activate_scene
      data:
        group_name: "Dormitorio"
        scene_name: "Dimmed"

luces_dormitorio_escena_nightlight:
  alias: 'Luces Dormitorio Escena Noche'
  sequence:
    - service: hue.hue_activate_scene
      data:
        group_name: "Dormitorio"
        scene_name: "Nightlight"

luz_on_armed_home:
  alias: 'Luces On Entrada si Sensor'
  sequence:
    # When a condition does not return true, the script will finish
    # Check Panel Alarma <> armed_home ==> Exit
    - condition: state
      entity_id: alarm_control_panel.ha
      state: 'armed_home'
    # Enciende Piloto Azul Alarma
    - service: light.turn_on
      entity_id: light.gateway_light_7811dcb788fa
      data:
        brightness: 50
        rgb_color: [0, 0, 254]

luces_on_family_home:
  alias: 'Family at Home Piloto ON'
  sequence:
    #- condition: template
    #  value_template: "{% if is_state('sun.sun', 'below_horizon') %}true{% endif %}"
    - condition: sun
      after: sunset
    - service: light.turn_on
      entity_id: light.hue_entrada

# Apagado Luces Toda La Casa
luces_off:
  alias: 'Luces Off'
  sequence:
    # When a condition does not return true, the script will finish
    - condition: template
      value_template: "{% if is_state('group.luces_casa_grp', 'on') %}true{% endif %}"
    # Apagado Luces Interior Casa
    - service: light.turn_off
      entity_id: light.luces_interior
    # Apagado Luces Exterior
    - service: switch.turn_off
      entity_id: group.luces_exterior_grp

# Apagado Luces Exterior Casa
luces_exterior_off:
  alias: 'Luces Exterior Off'
  sequence:
    # When a condition does not return true, the script will finish
    - condition: template
      value_template: "{% if is_state('group.luces_exterior_grp', 'on') %}true{% endif %}"

    # Apagado Luces Exterior
    - service: switch.turn_off
      entity_id: group.luces_exterior_grp

luces_exterior_on:
  alias: 'Luces Exterior y Jardín On'
  sequence:
    # Llamada a scripts de control programador luces diario
    - service: script.luces_jardin_check_xia_ext
    - service: script.luces_jardin_check_bas_sw4
    - service: script.luces_jardin_check_4ch_ch1
    - service: script.luces_jardin_check_4ch_ch2
    - service: script.luces_jardin_check_4ch_ch3
    - service: script.luces_jardin_check_4ch_ch4

luces_exterior_timer:
  alias: 'Luces Exterior Timer'
  sequence:
    - service: automation.turn_off
      entity_id: automation.l08_luces_on_exterior_segun_sensor
    - service: switch.turn_on
      entity_id: switch.wall_switch_right_158d0002236e75
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*LUCES: ON*'
          message: >
            >>> EVENTO: Sensor Presencia Exterior Activado

            >>> LUCES: Alumbrado Encendido 5'

    - delay: '00:05:00'
    - service: switch.turn_off
      entity_id: switch.wall_switch_right_158d0002236e75
    - service: automation.turn_on
      entity_id: automation.l08_luces_on_exterior_segun_sensor

luces_jardin_check_xia_ext:
  alias: 'Luces On Faroles Exterior'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_xia_ext
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.wall_switch_right_158d0002236e75

luces_jardin_check_bas_sw2:
  alias: 'Luces On SonoffBAS SW2'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_bas_sw2
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.jardin_programador_bas_sw2

luces_jardin_check_bas_sw4:
  alias: 'Luces On SonoffBAS SW4'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_bas_sw4
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.jardin_programador_bas_sw4

luces_jardin_check_4ch_ch1:
  alias: 'Luces On Sonoff4ch CH1'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch1
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.esphome_4ch_relay_1

luces_jardin_check_4ch_ch2:
  alias: 'Luces On Sonoff4ch CH2'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch2
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.esphome_4ch_relay_2

luces_jardin_check_4ch_ch3:
  alias: 'Luces On Sonoff4ch CH3'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch3
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.esphome_4ch_relay_3

luces_jardin_check_4ch_ch4:
  alias: 'Luces On Sonoff4ch CH4'
  sequence:
  - condition: state
    entity_id: input_boolean.jardin_programador_4ch_ch4
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.esphome_4ch_relay_4

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE DEPURADORA PISCINA                                               #
#                                                                             #
#-----------------------------------------------------------------------------#

piscina_timer_start:
  alias: Timer Piscina Start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.piscina
        duration: '{{ states.sensor.piscina_manual_segundos.state}}'
    - service: switch.turn_on
      entity_id: switch.esphome_pow_sw1
      #entity_id: switch.esphome_4ch_relay_2
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_start_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: '{{ states.sensor.piscina_duracion_manual.state}}'

piscina_timer_start_diario:
  alias: Timer Piscina Start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.piscina
        duration: '{{ states.sensor.piscina_duracion_planificada.state}}'
    - service: switch.turn_on
      entity_id: switch.esphome_pow_sw1
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_start_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: '{{ states.sensor.piscina_duracion_planificada.state}}'


piscina_timer_cancel:
  alias: Timer Piscina Cancel
  sequence:
    - service: timer.cancel
      entity_id: timer.piscina
    - service: switch.turn_off
      entity_id: switch.esphome_pow_sw1
      #entity_id: switch.esphome_4ch_relay_2
    # Actualiza Valor Hora Arranque Real
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_real_end_time
      data_template:
        time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: ''

piscina_timer_pause:
  alias: Timer Piscina Pause
  sequence:
    - service: timer.pause
      entity_id: timer.piscina
    - service: switch.turn_off
      entity_id: switch.esphome_pow_sw1
      #entity_id: switch.esphome_4ch_relay_2

piscina_timer_resume:
  alias: Timer Piscina Resume
  sequence:
    - service: timer.start
      entity_id: timer.piscina
    - service: switch.turn_on
      entity_id: switch.esphome_pow_sw1
      #entity_id: switch.esphome_4ch_relay_2

#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE RIEGO BONSAIS SONOFF 4CH-SW2 CH1 - CH4                           #
#                                                                             #
#-----------------------------------------------------------------------------#
#riego_ch1_timer_start_diario:
#  alias: Timer Riego CH1 Start Automatico
#  sequence:
#    - service: timer.start
#      data_template:
#        entity_id: timer.riego_ch1
#        duration: '{{ states.sensor.riego_ch1_duracion_planificada.state}}'
#    - service: switch.turn_on
#      entity_id: switch.esphome_4ch_sw2_relay_1


#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE INTERRUPTORES SONOFF                                             #
#                                                                             #
#-----------------------------------------------------------------------------#

# SONOFF S20 - NESSPRESSO
#
nesspreso_on_timer:
  alias: Nespresso On Timer
  sequence:
    - service: automation.turn_off
      entity_id: automation.S10_esphome_s20_Sunrise_Switch_On
    # Incremento del contador de autoencendido
    - service: counter.increment
      entity_id: counter.nespresso_start
    # Enciende la Nespresso
    - service: switch.turn_on
      entity_id: switch.esphome_s20_nespresso
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*HOMY: BUENOS DIAS*'
          message: >
            >>> Nespresso auto-encendida al amanecer.
            >>> Por favor, apáguela al terminar.

    - delay: '00:30:00'
    - service: automation.turn_on
      entity_id: automation.S10_esphome_s20_Sunrise_Switch_On

# SONOFF S20 - CALEFACCION
#
calefaccion_mfc_on:
  alias: Calefacción On Dormitorio MFC
  sequence:
    # Si el interruptor duerme en casa está On continua
    - condition: template
      value_template: "{% if is_state('input_boolean.calefac_programador_mfc', 'on') and
                             (is_state('input_boolean.family_sleep_home_mfc', 'on') or is_state('input_boolean.family_sleep_home_aac', 'on'))
                              %}true{% else %}false{% endif %}"
    - service: switch.turn_on
      entity_id: switch.esphome_s20_sw1
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*CALEFACCION ON*'
          message: >
            >>> EVENTO: Se enciende calefacción

            >>> LUGAR: Dormitorio MFC

calefaccion_paf_on:
  alias: Calefacción On Dormitorio PAF
  sequence:
    # Si el interruptor duerme en casa está On continua
    - condition: template
      value_template: "{% if is_state('input_boolean.calefac_programador_paf', 'on') and is_state('input_boolean.family_sleep_home_paf', 'on') %}true{% else %}false{% endif %}"
    - service: switch.turn_on
      entity_id: switch.esphome_s20_sw3
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*CALEFACCION ON*'
          message: >
            >>> EVENTO: Se enciende calefacción

            >>> LUGAR: Dormitorio PAF

calefaccion_mfc_off:
  alias: Calefacción Off Dormitorio MFC
  sequence:
    # Si el interruptor está On continua
    - condition: template
      value_template: "{% if is_state('switch.esphome_s20_sw1', 'on') %}true{% else %}false{% endif %}"
    - service: switch.turn_off
      entity_id: switch.esphome_s20_sw1
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*CALEFACCION*'
          message: >
            >>> EVENTO: Se apaga calefacción S20_SW1

            >>> LUGAR: Dormitorio MFC

calefaccion_paf_off:
  alias: Calefacción Off Dormitorio PAF
  sequence:
    # Si el interruptor está On continua
    - condition: template
      value_template: "{% if is_state('switch.esphome_s20_sw3', 'on') %}true{% else %}false{% endif %}"
    - service: switch.turn_off
      entity_id: switch.esphome_s20_sw3
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*CALEFACCION*'
          message: >
            >>> EVENTO: Se apaga calefacción S20_SW3

            >>> LUGAR: Dormitorio PAF

# SONOFF POW R2 - LAVADORA
#
lavadora_switch_off:
  alias: Lavadora Switch Off
  sequence:
    - delay: '00:00:05'

    - condition: template
      value_template: '{{ as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_warning.last_changed) - as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_lavando.last_changed) < 300 }}'

    - service: switch.turn_off
      entity_id: switch.esphome_pow_sw2

    # Si la diferencia de hora ultimo cambio entre Warning y Lavando < 5' => TRUE => CONTINUA
    #
    # WARNING:
    #  2019-05-26 10:21:08.137265+00:00
    #  1558866068.137265
    #
    # LAVANDO:
    #  2019-05-26 10:20:52.612011+00:00
    #  1558866052.612011
    #
    # DIF:
    #  15.525254011154175
    #  TRUE

    # WARNING:
    # {{ states.binary_sensor.esphome_pow_sw2_lavadora_warning.last_changed }}
    # {{ as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_warning.last_changed) }}
    #
    # LAVANDO:
    # {{ states.binary_sensor.esphome_pow_sw2_lavadora_lavando.last_changed }}
    # {{ as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_lavando.last_changed) }}
    #
    # DIF:
    # {{ as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_warning.last_changed) - as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_lavando.last_changed) }}
    #
    # {{ as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_warning.last_changed) - as_timestamp(states.binary_sensor.esphome_pow_sw2_lavadora_lavando.last_changed) < 300 }}


#-----------------------------------------------------------------------------#
#                                                                             #
# SCRIPTS DE ARRANQUE DEL SISTEMA                                             #
#                                                                             #
#-----------------------------------------------------------------------------#
sonoff_initialize:
  alias: 'Arranque Interruptores SONOFF'
  sequence:
    #
    # SONOFF_BAS_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0
    #
    # SONOFF_POW_SW2_LAVADORA => ON
    #- service: switch.turn_on
    #  entity_id: switch.esphome_pow_sw2

