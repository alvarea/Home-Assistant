TEMPLATE EDITOR
================

# Diferencia entre 2 fechas-horas
{{ as_timestamp(now()) | timestamp_local
}}

{{
states.input_datetime.magiccube_last_action1.attributes.timestamp | timestamp_local
}}

{{
states.binary_sensor.cube_158d00024a4a62.attributes.last_action
}}

{{ as_timestamp(now())
-
states.input_datetime.magiccube_last_action1.attributes.timestamp < 5
}}




    # Actualiza Acción ANTERIOR
    - service: input_text.set_value
      entity_id: input_text.magiccube_last_action2
      data_template:
        value: '{{ states.input_text.magiccube_last_action1.state }}'
    # Actualiza hora evento ANTERIOR
    - service: input_datetime.set_datetime
      entity_id: input_datetime.magiccube_last_action2
      data_template:
        time: '{{ states.input_datetime.magiccube_last_action1.attributes.timestamp | timestamp_local }}'
        #time: '{{ states.input_datetime.magiccube_last_action1.attributes.timestamp | timestamp_custom("%H:%M:%S") }}'
    # Actualiza Acción ULTIMA
    - service: input_text.set_value
      entity_id: input_text.magiccube_last_action1
      data_template:
        value: '{{ states.binary_sensor.cube_158d00024a4a62.attributes.last_action }}'
      # Actualiza hora evento ULTIMO
    - service: input_datetime.set_datetime
      entity_id: input_datetime.magiccube_last_action1
      data_template:
        time: '{{ as_timestamp(now()) | timestamp_local }}'
        #time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S")) }}'


{% set curhour = now().hour %}
{% if now().weekday() in (0,1,2,3,4) %}
  {% if curhour <= 23 and curhour >= 13 %}
    homeassistant.turn_on
  {% else %}
    homeassistant.turn_off
  {% endif %}
{% else %}
  {% if curhour <= 2 or curhour >= 13 %}
    homeassistant.turn_on
  {% else %}
    homeassistant.turn_off
  {% endif %}
{% endif %}


piscina_real_start_time:
  icon: mdi:clock-outline

piscina_start_time:
  icon: mdi:clock-outline


#
# CODIGO TEMPORAL EXCLUIDO
#

- id: L09_luces_on_estudio_on_sensor
  alias: 'L09 Luces On Estudio Según Sensor'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e464a6
      to: 'on'
  condition:
    condition: or  # 'when dark' condition: either after sunset or before sunrise
    conditions:
      - condition: sun
        after: sunset
        after_offset: "-0:15:00"
      - condition: sun
        before: sunrise
        before_offset: "1:30:00"
  action:
    - service: light.turn_on
      entity_id: light.hue_estudio
      data:
        brightness: 180
        rgb_color: [255, 187, 106]


# Buen Timer ejemplo

ust looking at your code without the means of testing it I can see anything wrong.
Have you tried adapting the example code from the cookbook to see if the results are the same?
Quick cut and paste with your variables inserted should probably work.

automation:
  alias: Turn on bedroom lights when there is movement
  trigger:
    - platform: state
      entity_id: sensor.bedroom_motion
      to: 'yes'
  action:
    service: homeassistant.turn_on
    entity_id: script.timed_lamp

script:
  timed_lamp:
    alias: "Turn on lamp and set timer"
    sequence:
      # Cancel ev. old timers
      - execute_service: script.turn_off
        service_data:
           entity_id: script.timer_off
      - execute_service: light.turn_on
        service_data:
          entity_id: light.bedroom
      # Set new timer
      - execute_service: script.turn_on
        service_data:
          entity_id: script.timer_off

  timer_off:
    alias: "Turn off lamp after 30 minutes"
    sequence:
      - delay:
          minutes: 30
      - execute_service: light.turn_off
        service_data:
          entity_id: light.bedroom