
#-----------------------------------------------------------------------------#
#                                                                             #
# ARRANQUE/PARADA DEL SISTEMA                                                 #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: hass_startup_automation
  alias: hass_startup_scripts
  trigger:
    platform: homeassistant
    # Event can also be 'shutdown'
    event: start
  action:
    # Para todas las reglas durante el arranque del sistema
    - service: automation.turn_off
      data:
        entity_id:
          - group.all_automations
    #
    # Llamada al script para inicializar meta-trackers
    - service: script.reset_meta_tracker
    #
    # Llamada al script para inicializar meta-alarm_trigger
    #- service: script.reset_meta_alarm_trigger
    #
    # Llamada al script de inicialización de interruptores Sonoff
    - service: script.sonoff_initialize
    #
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople
    #
    # 30" espera y arranca reglas
    - delay: 30
    - service: automation.turn_on
      data:
        entity_id:
          - group.all_automations

    # 30" y actualiza certificado
    - delay: 30
    - service: homeassistant.update_entity
      entity_id: sensor.ssl_certificate_expiry
#
# CERTBOT SSL CERTIFICATE: ALERT TO WARN US IF SOMETHING WENT WRONG.
#
- id: S1_ssl_expiry_notification
  alias: 'S1 SSL expiry notification'
  trigger:
    platform: numeric_state
    entity_id: sensor.ssl_certificate_expiry
    below: 15
  action:
    service: script.turn_on
    entity_id: script.notifica_evento
    data:
      variables:
        title: '*CERTIFICADO SSL*'
        message: >
          >>> EVENTO: El certificado SSL expira en {{ states('sensor.ssl_certificate_expiry') }}

#-----------------------------------------------------------------------------#
#                                                                             #
# TAREAS DIARIAS DEL SISTEMA                                                  #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: hass_daily_automations
  alias: hass_daily_scripts
  trigger:
    - platform: time
      at: '23:55:00'
  action:
    # Para todas las reglas durante el arranque del sistema
    #- service: counter.reset
    #  entity_id: counter.nespresso_start
    # HASS Alarm Nigth Volume
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_armed
        value: '2'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_disarmed
        value: '2'

- id: hass_alarm_night_volume
  alias: 'HASS Alarm Day Volume'
  trigger:
    - platform: time
      at: '10:00:00'
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_armed
        value: '10'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_disarmed
        value: '10'

#-----------------------------------------------------------------------------#
#                                                                             #
# ALARMA: Armado y Control de la Alarma                                       #
#                                                                             #
#-----------------------------------------------------------------------------#

#
# ALARMA AUTOMATICA SENSOR HUMO COCINA
#
- id: F1_alarma_fuego_cocina
  alias: 'F1 Alarma Fuego Cocina'
  trigger:
    - platform: state
      entity_id: binary_sensor.smoke_sensor_158d0001fd321c
      from: 'off'
      to: 'on'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*ALARMA HUMO*'
          message: >
            >>> URGENTE: SENSOR HUMO COCINA
#
# REGLA: TEST SONIDOS ALARMA
#
- id: X1_test
  alias: 'X1 TEST ON'
  trigger:
    - platform: state
      entity_id: input_boolean.alarm_test_sirenas
      from: 'off'
      to: 'on'
  action:
    #ringtone_vol:
    # Aviso sonoro con Xiaomi GW
    - service: script.sirena_xiaomi_play_alarm_armed

#
# REGLA: ALARMA DISARMED A <PENDING>
#
- id: A0
  alias: 'A0 Alarma Disarmed to Pending'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'disarmed'
      to: 'pending'
  action:
    - service: script.alarma_to_pending
      data_template:
        fromstate: '{{trigger.from_state.state}}'
        tostate: '{{trigger.to_state.state}}'
        ringtone_msg: 10005

#
# REGLA: ALARMA ARMED A <PENDING>
#
- id: A1
  alias: 'A1 Alarma Armed to Pending'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_home'
      to: 'pending'
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_away'
      to: 'pending'
  action:
    - service: script.alarma_to_pending
      data_template:
        fromstate: '{{trigger.from_state.state}}'
        tostate: '{{trigger.to_state.state}}'
        ringtone_msg: 10004

#
# REGLA: ARMADO COMPLETADO
#
- id: A2
  alias: 'A2 Alarma Armado OK'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'armed_away'
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'armed_home'
  action:
    # Aviso sonoro con Xiaomi GW
    - service: script.turn_on
      entity_id: script.sirena_xiaomi_play_alarm_armed
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> ESTADO: Sistema Armado


    # Revisar
    # https://community.home-assistant.io/t/automation-with-is-state-trigger-to-state-on-not-working/54691/2
    #        >>> MODO: "{{ trigger.to_state.state }}"

#
# REGLA: DESARMADO OK => SIRENA OFF, AVISO Y NOTIFICACION
#
- id: A4
  alias: 'A4 Alarma Disarmed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'disarmed'
  action:
    # Apagado Sirenas y Aviso sonoro con Xiaomi GW
    - service: script.sirena_xiaomi_play_alarm_disarmed
    # Apaga Luz Piloto Gateway
    - service: light.turn_off
      entity_id: light.gateway_light_7811dcb788fa
    # Script Notificación Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> ESTADO: Desarmado

#
# REGLA: TRIGGER SENSOR => MODO ARMADO AWAY => ALARMA TRIGGERED
#
- id: A5
  alias: 'A5 Alarm Trigger Armed Away'
  trigger:
    - platform: state
      entity_id:
        - group.sensores_alarm_home
        - group.sensores_alarm_away
      to: 'on'
    # Los sensores vibración solo saltan por trigger = event
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: vibrate
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: tilt
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha
        state: armed_away
  action:
    - service: python_script.meta_alarm_trigger
      data_template:
        entity_id: '{{trigger.entity_id}}'
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha

#
# REGLA: TRIGGER SENSOR => MODO ARMADO HOME => ALARMA TRIGGERED
#
- id: A6
  alias: 'A6 Alarm Trigger Armed Home'
  trigger:
    - platform: state
      entity_id: group.sensores_alarm_home
      to: 'on'
    # Los sensores vibración solo saltan por trigger = event
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: vibrate
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: tilt
  condition:
    - condition: state
      entity_id: alarm_control_panel.ha
      state: armed_home
  action:
    - service: python_script.meta_alarm_trigger
      data_template:
        entity_id: '{{trigger.entity_id}}'
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha

# REGLA: ALARMA ARMED_AWAY TRIGGERED ==> SIRENA + NOTIFICACION COMPLETA
#
- id: A7
  alias: 'A7 Alarm Triggered'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_away'
      to: 'triggered'
  action:
    # Script Notificación Alarma Away
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> URGENTE: ALARMA ACTIVADA

            >>> ZONA: {{ states('sensor.alarm_zone') }}

    # AVISO SIRENAS ALARMA
    - service: script.sirena_alarma_armed_away

# REGLA: ALARMA ARMED_HOME TRIGGERED ==> SIRENA + NOTIFICACION COMPLETA
#
- id: A8
  alias: 'A8 Alarm Triggered'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_home'
      to: 'triggered'
  action:
    # Script Notificación Alarma Perímetro
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> URGENTE: ALARMA PERIMETRO ACTIVADA

            >>> ZONA: {{ states('sensor.alarm_zone') }}

    # AVISO SIRENAS ALARMA
    - service: script.sirena_alarma_armed_home


# REGLA: TRIGGER DESARMADO AUTOMATICO AL AMANECER
#
- id: A9
  alias: 'A9 Alarm Home Auto Disarm'
  trigger:
    - platform: sun
      event: sunrise
      #offset: "+00:30:00"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha
        state: armed_home
      # Hay alguien en casa
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
  action:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.ha
    # Aviso sonoro con Xiaomi GW
    - service: script.turn_on
      entity_id: script.sirena_stop_alarm
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> ESTADO: Desarmado automático al amanecer.

#
# REGLA: APAGADO BOTON PANICO
#
- id: A10
  alias: 'A10 Alarm Boton Panico Off'
  trigger:
    platform: state
    entity_id: input_boolean.panic_button
    from: 'on'
    to: 'off'
  action:
    # Llamada a script desactivado botón pánico.
    - service: script.alarma_boton_panico_off

#
# REGLA: BOTON APAGADO ESPHOME-SW1 ==> SIRENA OFF
#
- id: A11
  alias: 'A12 Alarm Sirena Interior Off'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw0_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0
    - service: light.toggle
      entity_id: light.esphome_bas_sw0_led

#
# REGLA: AVISO ALARMA POR SENSOR VIBRACION EN PUERTA RACK COMUNICACIONES ESTUDIO
#
- id: A12
  alias: 'A12 Alarm Sensor Vibracion Rack Estudio'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: binary_sensor.vibration_158d0002b15e3b
        action_type: vibrate
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: binary_sensor.vibration_158d0002b15e3b
        movement_type: tilt
  condition:
    - condition: state
      entity_id: input_boolean.rack_sensor_vibration_disable
      state: 'off'
  action:
    # Script Notificación Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> SENSOR VIBRACION: RACK COMUNICACIONES
            >>> SALA: ESTUDIO

#-----------------------------------------------------------------------------#
#                                                                             #
# FAMILY META TRACKER HOME/AWAY                                               #
#                                                                             #
#-----------------------------------------------------------------------------#
#
#MFC_Trackers = ['device_tracker.mfc_iphone_nmap',
#                'device_tracker.mfc_iphone_owntrack_2',
#                'device_tracker.mfc_ios',
#                'device_tracker.e3c67d6b_51bf_445b_a241_a0045bfe0222_2']
#
#AAC_Trackers = ['device_tracker.aac_iphone_nmap',
#                'device_tracker.aac_iphone_owntrack_2',
#                'device_tracker.aac_ios',
#                'device_tracker.b8b52a3b_f038_4e72_a268_705d9b06e496_2']
#
#PAF_Trackers = ['device_tracker.paf_iphone_nmap',
#                'device_tracker.paf_iphone_owntrack_2',
#                'device_tracker.paf_ios',
#                'device_tracker.863b93f2_f00f_4737_a35f_1ff0cce201a8_2' #PAF
#
#AAF_Trackers = ['device_tracker.aaf_iphone_nmap',
#                'device_tracker.aaf_ios',
#                'device_tracker.daa04833_9772_4800_bf22_57f406aeb129_2']

- id: U1
  alias: "Update Device Meta Tracker"
  initial_state: 'on'
  trigger:
    # Delayed action for router-based and Owntracks trackers that are not 100% reliable
    - platform: state
      entity_id:
        - device_tracker.aac_iphone_nmap        # NMAP
        - device_tracker.mfc_iphone_nmap        # NMAP
        - device_tracker.paf_iphone_nmap        # NMAP
        - device_tracker.aaf_iphone_nmap        # NMAP
        - device_tracker.aac_iphone_owntrack_2  # OWNTRACK
        - device_tracker.mfc_iphone_owntrack_2  # OWNTRACK
        - device_tracker.paf_iphone_owntrack_2  # OWNTRACK
      to: 'not_home'
      for: '00:07:00'
    - platform: state
      entity_id:
        - device_tracker.aac_iphone_owntrack_2  # OWNTRACK
        - device_tracker.mfc_iphone_owntrack_2  # OWNTRACK
        - device_tracker.paf_iphone_owntrack_2  # OWNTRACK
      to: 'home'
    - platform: state
      entity_id:
        - device_tracker.aac_iphone_nmap      # NMAP
        - device_tracker.mfc_iphone_nmap      # NMAP
        - device_tracker.paf_iphone_nmap      # NMAP
        - device_tracker.aaf_iphone_nmap      # NMAP
      to: 'home'
      for: '00:00:30'
    - platform: state
      entity_id:
        - device_tracker.aac_ios                                  # IOSAPP
        - device_tracker.mfc_ios                                  # IOSAPP
        - device_tracker.paf_ios                                  # IOSAPP
        - device_tracker.aaf_ios                                  # IOSAPP
        - device_tracker.e3c67d6b_51bf_445b_a241_a0045bfe0222_2   # MFC
        - device_tracker.b8b52a3b_f038_4e72_a268_705d9b06e496_2   # AAC
        - device_tracker.863b93f2_f00f_4737_a35f_1ff0cce201a8_2   # PAF
        - device_tracker.daa04833_9772_4800_bf22_57f406aeb129_2   # AAF
  action:
    - service: script.updatetracker
      data_template:
        entityid: '{{trigger.entity_id}}'
        fromstate: '{{trigger.from_state.state}}'
        tostate: '{{trigger.to_state.state}}'

#-----------------------------------------------------------------------------#
#                                                                             #
# TRACKING FAMILY AT HOME: Control Home/Away                                  #
#                                                                             #
#-----------------------------------------------------------------------------#

- id: T01
  alias: 'T01 Family Away'
  trigger:
    # Ya no hay nadie en casa
    platform: state
    entity_id: binary_sensor.family_any_home
    from: 'on'
    to: 'off'
  action:
    # Script Activación Alarma ARM AWAY
    - service: script.homy_armado_total
    # Delay para no bloquear notificaciones
    - delay: 0:03
    # Script Luces Apagado Total
    - service: script.luces_off

- id: T02
  alias: 'T02 Family at Home'
  trigger:
    # Hay alguien en casa
    - platform: state
      entity_id: binary_sensor.family_any_home
      from: 'off'
      to: 'on'
  action:
    # Script encendido Luz piloto si es de noche
    - service: script.turn_on
      entity_id: script.luces_on_family_home
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*FAMILY_HOME: SI*'
          message: >
            >>> EVENTO: Primero en Entrar {{ states('sensor.family_last_tracking') }}

- id: T03
  alias: 'T03 Armed Home Family at Home'
  trigger:
    - platform: time
      at: '01:00:00'
    # Están todos en casa
    - platform: state
      entity_id: binary_sensor.family_all_home
      from: 'off'
      to: 'on'
    - platform: numeric_state
      entity_id: sensor.baye_probability_aaf
      above: 95
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_all_home
        state: 'on'
      - condition: state
        entity_id: group.sensores_alarm_home
        state: 'off'
      - condition: state
        entity_id: alarm_control_panel.ha
        state: disarmed
      - condition: time
        after: '01:00:00'
        # antes del amanecer
      - condition: sun
        before: sunrise
      - condition: numeric_state
        entity_id: sensor.baye_probability_aaf
        above: 98
  action:
    - delay: 0:30
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.ha
    # Aviso sonoro con Xiaomi GW
    - service: script.turn_on
      entity_id: script.sirena_xiaomi_play_alarm_armed
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*ALARMA HOMY*'
          message: >
            >>> EVENTO: Todos en casa después de media noche

            >>> ESTADO: Sistema Armado Parcial

- id: T04
  alias: 'T04 Sleep Family Home'
  trigger:
    # Hay alguien en casa
    - platform: state
      entity_id:
        - input_boolean.family_sleep_home_mfc
        - input_boolean.family_sleep_home_acc
        - input_boolean.family_sleep_home_paf
        - input_boolean.family_sleep_home_aaf
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

- id: T05
  alias: 'T05 Sleep Family Check MFC'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_mfc
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_mfc
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_mfc
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*FAMILY@HOME*'
          message: >
            >>> Malen está en casa a las 23:00

            >>> Activado el control de Duerme en Casa.

- id: T06
  alias: 'T05 Sleep Family Check AAF'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_aaf
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_aaf
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_aaf
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*FAMILY@HOME*'
          message: >
            >>> Agu está en casa a las 23:00

            >>> Activado el control de Duerme en Casa.

- id: T07
  alias: 'T05 Sleep Family Check PAF'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_paf
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_paf
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_paf
    # Notifica Evento
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*FAMILY@HOME*'
          message: >
            >>> Paloma está en casa a las 23:00

            >>> Activado el control de Duerme en Casa.

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE CONTROL DE LUCES Y ALUMBRADO                                      #
#                                                                             #
#-----------------------------------------------------------------------------#

- id: L01
  alias: 'L01 Luces On Exterior Sunset'
  trigger:
    - platform: sun
      # offset: "-00:30:00"   # Horario Invierno GMT+1
      # offset: "-00:05:00"   # Horario Invierno GMT+2
      event: sunset
      offset: "-00:05:00"     # Horario Verano GMT+2
  condition:
    condition: numeric_state
    entity_id: sensor.illumination_158d0001e637f6
    below: 50
  action:
    # Encendido Luces Exterior y Jardín
    - service: script.luces_exterior_on

- id: L02
  alias: 'L02 Luces Off Exterior Sunset'
  trigger:
    - platform: sun
      # offset: "+03:30:00"   # Horario Invierno GMT+1
      # offset: "+02:30:00"   # Horario Verano GMT+2
      event: sunset
      offset: "+03:30:00"
  action:
    # Script Luces Exterior Off
    - service: script.luces_exterior_off

- id: L03
  alias: 'L03 Luces Off Exterior All Family Home'
  trigger:
    # Los que duermen ya están en casa
    - platform: state
      entity_id: binary_sensor.family_all_home
      from: 'off'
      to: 'on'
    - platform: time
      at: '00:01:00'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '23:00:00'
      - condition: time
        before: '20:00:00'
      - condition: state
        entity_id: switch.wall_switch_right_158d0002236e75 # Luces exterior
        state: 'on'
      # Están todos en casa
      - condition: state
        entity_id: binary_sensor.family_all_home
        state: 'on'
  action:
    - delay: 0:05
    # Script Luces Exterior Off
    - service: script.luces_exterior_off
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*LUCES: OFF*'
          message: >
            >>> EVENTO: Es Medianoche y todos en casa

            >>> LUCES: Alumbrado Exterior Off

- id: L04
  alias: 'L04 Luces On Salon Puesta Sol 30m'
  trigger:
    - platform: sun
      # offset: "-00:30:00"   # Horario Invierno GMT+1
      # offset: "-00:05:00"   # Horario Verano GMT+2
      event: sunset
      offset: "-00:30:00"
  condition:
    condition: and
    conditions:
        # Hay alguien en casa
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_158d0001e05661
        below: 50
  action:
    - service: light.turn_on
      entity_id: light.luz_vitrina

- id: L05
  alias: 'L05 Luces On Exterior Segun Sensor'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e637f6
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.wall_switch_right_158d0002236e75
        state: 'off'
      - condition: or  # 'when dark' condition: either after sunset or before sunrise
        conditions:
          - condition: sun
            # after_offset: "-01:00:00"  ==> HORARIO INVIERNO GMT+1
            # after_offset: "-00:30:00"  ==> HORARIO VERANO GMT+2
            after: sunset
            after_offset: "-01:00:00"     # Horario VERANO1
          - condition: sun
            before: sunrise
            #before_offset: "00:15:00"    # Horario Invierno GMT+1, en el amanecer +15m / +60m
            #before_offset: "-00:00:00"   # Horario Verano GMT+2, el amanecer
          #- condition: numeric_state
          #  entity_id: sensor.illumination_158d0001e637f6
          #  below: 1
  action:
    - service: script.luces_exterior_timer

- id: L06
  alias: 'L06 Luces Off Before Sunrise'
  trigger:
    - platform: time
      at: "01:00:00"
    - platform: time
      at: "02:00:00"
    - platform: time
      at: "03:30:00"
    - platform: time
      at: "04:00:00"
    - platform: time
      at: "05:00:00"
    - platform: time
      at: "06:00:00"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: light.luces_interior
        state: 'on'
      - condition: state
        entity_id: group.luces_exterior_grp # Luces exterior
        state: 'on'
  action:
    # Apagado Luces Casa
    - service: script.luces_off
    # Notifica a Familia
    - service: script.turn_on
      entity_id: script.notifica_evento
      data:
        variables:
          title: '*LUCES: OFF*'
          message: >
            >>> EVENTO: Luces encendidas antes del amanecer

            >>> LUCES: Apagado total

- id: L07
  alias: 'L07 Luces On Entrada Según Sensor'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e55903
      to: 'on'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022b393c
      to: 'on'
  condition:
    condition: or  # 'when dark' condition: either after sunset or before sunrise
    conditions:
      - condition: sun
        # after_offset: "-01:00:00"  ==> HORARIO INVIERNO GMT+1
        # after_offset: "-00:30:00"  ==> HORARIO VERANO GMT+2
        after: sunset
        after_offset: "-01:00:00"
      - condition: sun
        before: sunrise
        # en el amanecer +3h'
        before_offset: "+03:00:00"
  action:
    - service: automation.turn_off
      entity_id: automation.l07_luces_on_entrada_segun_sensor
    # Luces Entrada ON
    - service: light.turn_on
      entity_id: light.luz_entrada
      data:
        brightness: 120
        rgb_color: [254, 0, 0]
    # Si Alarm.Armed_Home => Piloto ON
    - service: script.luz_on_armed_home
    # Espera de 5'
    - delay: '00:05:00'
    # Luces Entrada OFF
    - service: light.turn_off
      entity_id:
        - light.luz_entrada
        - light.gateway_light_7811dcb788fa
    #
    - service: automation.turn_on
      entity_id: automation.l07_luces_on_entrada_segun_sensor

- id: L08
  alias: 'L08 Luces On Dormitorio Según Sensor'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0002ea1d0f
      to: 'on'
  condition:
    condition: and
    conditions:
      # siempre que la luz no esté ya encendida
      - condition: state
        entity_id: light.dormitorio
        state: 'off'
      # entre las 18:00 y las 23:59 máximo.
      - condition: time
        after: '18:00:00'
        before: '23:59:59'
      - condition: sun
        # after_offset: "-01:00:00"  ==> HORARIO INVIERNO GMT+1
        # after_offset: "-00:30:00"  ==> HORARIO VERANO GMT+2
        after: sunset
        after_offset: "-01:00:00"
      # si el sensor de luz está es < 1 lumx
      - condition: numeric_state
        entity_id: sensor.illumination_158d0002ea1d0f
        below: 5
  action:
    # Regla Off
    - service: automation.turn_off
      entity_id: automation.l08
    # Luces On
    - service: script.luces_dormitorio_escena_relax
    # Espera de 5'
    - delay: '00:05:00'
    # Luces Off
    - service: light.turn_off
      entity_id: light.dormitorio
    # Regla On
    - service: automation.turn_on
      entity_id: automation.l08

- id: L09
  alias: 'L09 Luces On Dormitorio Warning'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0002ea1d0f       # Sensor Dormitorio
      to: 'on'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022b393c  # Puerta Entrada
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e637f6       # Sensor Exterior
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e55903       # Sensor Entrada
      to: 'on'
  condition:
    condition: and
    conditions:
      # Dormitorio Warning F-Mode = on
      - condition: state
        entity_id: input_boolean.dormitorio_warning
        state: 'on'
      - condition: sun
        after: sunset
  action:
    # Luces On
    - service: script.luces_dormitorio_escena_relax
    - delay: '00:00:10'
    - service: light.turn_off
      entity_id: light.dormitorio
      data:
        transition: 10

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS MAGIC CUBE                                                           #
#                                                                             #
#-----------------------------------------------------------------------------#
#
# Available events are flip90, flip180, move, tap_twice, shake_air, swing, alert,
# free_fall and rotate.
# The component stores the last action as the attribute last_action.
#
- id: L10
  alias: 'L10 Cube Tap Twice Light Toggle'
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: tap_twice
  action:
    - service: light.toggle
      entity_id:
        - light.estudio
        - light.esphome_lb1_l01
    #- service: switch.toggle
    #  entity_id:
    #    - switch.esphome_bas_sw2

- id: L11_cube_flip90_light_on
  alias: 'L11 Cube Flip90 Light on'
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: flip90
  action:
    - service: light.turn_on
      entity_id: light.luz_estudio
      data:
        brightness: 175
        rgb_color: [254, 200, 145]
    #- service: switch.turn_on
    #  entity_id:
    #    - switch.esphome_bas_sw2
    - service: light.turn_on
      entity_id: light.esphome_lb1_l01
      data:
        white_value: 200
        rgb_color: [254, 126, 0]
        brightness: 255

- id: L12_cube_shake_light_off
  alias: 'L12 Cube Shake Light off'
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: shake_air
  action:
    - service: light.turn_off
      entity_id: light.luz_estudio
      data:
        transition: 10
    - service: light.turn_off
      entity_id: light.esphome_lb1_l01
    #- service: switch.turn_off
    #  entity_id:
    #    - switch.esphome_bas_sw2

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE CONTROL DE SMART SWITCH ESPHOME                                   #
#                                                                             #
#-----------------------------------------------------------------------------#

#
# ESPHOME 4CH - JARDIN
#
- id: S01
  alias: 'S01 Sonoff 4CH Boton1 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_1
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_1

- id: S02
  alias: 'S01 Sonoff 4CH Boton2 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_2
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_2

- id: S03
  alias: 'S03 Sonoff 4CH Boton3 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_3
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_3

- id: S04
  alias: 'S04 Sonoff 4CH Status'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_status
      from: 'on'
      to: 'off'
      for: '00:05:00'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*AVISO FALLO ELECTRICO*'
          message: >
            >>> URGENTE: CUADRO ELECTRICO JARDIN SIN CORRIENTE

- id: S05
  alias: 'S05 Sonoff POW Status'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw1_status
      from: 'on'
      to: 'off'
      for: '00:05:00'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*AVISO FALLO ELECTRICO*'
          message: >
            >>> URGENTE: CUADRO ELECTRICO DEPURADORA PISCINA SIN CORRIENTE

# ESPHOME POW - DEPURADORA PISCINA
#
- id: S06
  alias: 'S06 Timer Piscina Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.piscina_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.piscina_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.piscina_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.piscina_programador_dias
        state: 'on'
  action:
    # Timer Programador Diario Piscina
    - service: script.piscina_timer_start_diario


- id: S07
  alias: 'S07 Timer Piscina End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.piscina
  action:
    # Inicia el Timer de la Piscina
    - service: script.piscina_timer_cancel
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: ''

- id: S08
  alias: 'S08 Set Hora Final Planificado'
  trigger:
    - platform: state
      entity_id: sensor.piscina_diario_endtime
    - platform: state
      entity_id: sensor.piscina_duracion_planificada
  action:
    # Actualiza Valor input_datetime.piscina_end_time
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_end_time
      data_template:
        time: '{{ states.sensor.piscina_diario_endtime.state }}'

# ESPHOME S20 - SW1 Radiador Dormitorio Principal
#
- id: S09
  alias: 'S09 Sonoff S20 SW1 Toggle'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_s20_sw1_boton
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_s20_sw1

- id: S09b
  alias: 'S09b Sonoff S20 SW3 Toggle'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_s20_sw3_boton
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_s20_sw3

- id: S10
  alias: 'S10 Calefaccion On'
  trigger:
    - platform: sun
      # offset: "+03:30:00"   # Horario Invierno GMT+1  => 18:30 + 3:30 = 22:00
      event: sunset
      offset: "+03:30:00"
    - platform: sun
      event: sunrise
      offset: "-02:00:00"
  condition:
    # Hay alguien en casa
    condition: state
    entity_id: binary_sensor.family_any_home
    state: 'on'
  action:
    - service: script.calefaccion_mfc_on
    - delay: 10
    - service: script.calefaccion_paf_on

- id: S11
  alias: 'S11 SonoffS20 Switch Off'
  trigger:
    - platform: time
      at: '01:00:00'
    - platform: sun
      event: sunrise
      offset: "-00:15:00"
  action:
    - service: script.calefaccion_mfc_off
    - delay: 10
    - service: script.calefaccion_paf_off

#
# ESPHOME BASIC SW2 PORCHE PISCINA
#
- id: S12
  alias: 'S12 Sonoff SW2 Porche Piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw1_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW2 ==> OFF
    - service: switch.toggle
      entity_id: switch.esphome_bas_sw1
    - service: light.toggle
      entity_id: light.esphome_bas_sw1_led

#
# ESPHOME BASIC SW4 PORCHE SALON
#
- id: S13
  alias: 'S13 Sonoff SW4 Porche Piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw4_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW4 ==> OFF
    - service: switch.toggle
      entity_id: switch.esphome_bas_sw4
    - service: light.toggle
      entity_id: light.esphome_bas_sw4_led

#
# SAI RACK COMUNICACIONES
#
- id: S14
  alias: 'S14 ups apc700 status'
  trigger:
    - platform: state
      entity_id: binary_sensor.ups_status
      from: 'on'
      to: 'off'
      for: '00:00:10'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*AVISO FALLO ELECTRICO*'
          message: >
            >>> URGENTE: SAI RACK COMUNICACIONES SIN CORRIENTE

# ESPHOME POW R2 SW2 - LAVADORA
#
- id: S15
  alias: 'S15 Sonoff POW Lavadora Boton Switch on'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_pow_sw2_boton
    from: 'off'
    to: 'on'
    for: '00:00:02'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_pow_sw2

- id: S16
  alias: 'S16 Sonoff POW Lavadora Led'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw2_lavadora_lavando
  action:
    - service: light.toggle
      entity_id: light.esphome_pow_sw2_led

- id: S17
  alias: 'S17 Sonoff POW Lavadora Warning off'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw2_lavadora_warning
      from: 'off'
      to: 'on'
  action:
    - service: script.lavadora_switch_off


# ESPHOME 4CH-R2 SW2 RIEGO BONSAIS Relay1 - Relay4
#
# https://community.home-assistant.io/t/timer-execute-and-action-from-lovelace-ui/123512
# https://community.home-assistant.io/t/lovelace-irrigation-card-help-needed/67667/2
#
- id: S18
  alias: 'S18 Timer Riego CH1 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch1_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.riego_ch1_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.riego_ch1_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Diario
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch1
        duration: '{{ states.sensor.riego_ch1_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_1

- id: S19
  alias: 'S19 Timer Riego CH1 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch1
  action:
    - service: script.riego_ch1_timer_cancel

- id: S20
  alias: 'S20 Timer Riego - CH2 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch2_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.riego_ch2_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.riego_ch2_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Diario
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch2
        duration: '{{ states.sensor.riego_ch2_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_2

- id: S21
  alias: 'S21 Timer Riego CH2 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch2
  action:
    - service: script.riego_ch2_timer_cancel

- id: S22
  alias: 'S22 Timer Fuente CH3 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch3_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.riego_ch3_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.riego_ch3_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch3
        duration: '{{ states.sensor.riego_ch3_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_3


- id: S23
  alias: 'S23 Timer Fuente CH3 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch3
  action:
    - service: script.riego_ch3_timer_cancel

- id: S24
  alias: 'S24 Timer Fuente Frog SW2 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.fzen_sw2_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.fzen_sw2_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.fzen_sw2_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.fzen_sw2
        duration: '{{ states.sensor.fzen_sw2_duracion_planificada.state|int * 60 }}'
    - service: switch.turn_on
      entity_id: switch.esphome_bas_sw2

- id: S25
  alias: 'S25 Timer Fuente Frog SW2 Start2'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.fzen_sw2_start_time2.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.fzen_sw2_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.fzen_sw2_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.fzen_sw2
        duration: '{{ states.sensor.fzen_sw2_duracion_planificada2.state|int * 60 }}'
    - service: switch.turn_on
      entity_id: switch.esphome_bas_sw2

- id: S26
  alias: 'S26 Timer Fuente Frow SW2 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.fzen_sw2
  action:
    - service: script.fzen_sw2_timer_cancel

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE CONTROL DE PING DEVICES BINARY SENSOR                             #
#                                                                             #
#-----------------------------------------------------------------------------#

#
# ping_01_router_fibra_movistar:
#
- id: P01
  alias: 'P01_router_fibra_movistar'
  trigger:
    - platform: state
      entity_id: binary_sensor.ping_00_wan_internet_google
      from: 'on'
      to: 'off'
      for: '00:01:00'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*AVISO ERROR CONECTIVIDAD'
          message: >
            >>> URGENTE: ERROR CONEXION INTERNET

            >>> DISPOSITIVO: 00 WAN ROUTER MOVISTAR

#
# ping_05_router_wifi_tplink:
#
- id: P05
  alias: 'P05_router_wifi_tplink'
  trigger:
    - platform: state
      entity_id: binary_sensor.ping_05_router_wifi_tplink
      from: 'on'
      to: 'off'
      # for: '00:06:00'
  action:
    # Script Notificación Alarma
    - service: script.turn_on
      entity_id: script.notifica_alarma
      data:
        variables:
          title: '*AVISO ERROR CONECTIVIDAD'
          message: >
            >>> URGENTE: FALLO DE PING

            >>> DISPOSITIVO: 05_router_wifi_tplink
